#include "energyFunctions.h"
#include "Eigen/src/Core/Matrix.h"
// #include "itensor/index.h"
// #include "itensor/itensor.h"

// Defined in
// A Variational Model for Reconstructive Phase Transformations in Crystals,
// and their Relation to Dislocations and Plasticity
// Sergio Conti & Giovanni Zanzotto

// Generated by python script
namespace ContiPotential {

double energyDensity(double C11, double C22, double C12, double beta, double K,
                     double noise) {
  double x0 = C11 * C22 - pow(C12, 2);
  double x1 = noise * x0;
  double x2 = pow(x0, -1.0 / 2.0);
  double x3 = C11 * x2;
  double x4 = C22 * x2;
  double x5 = pow(x3 - x4, 2);
  double x6 = C12 * x2;
  double x7 = x3 + x4;
  double x8 = -4 * x6 + x7;
  double x9 = pow(x8, 2);
  double x10 = pow(x5 + 0.33333333333333331 * x9, 3);
  double x11 = x5 * x8 - 0.1111111111111111 * pow(x8, 3);
  double x12 = pow(x11, 2);
  double x13 = -x6 + x7;
  double x14 = 0.25 * x5 + 0.083333333333333329 * x9;
  double x15 = x11 * x14;

  double phi =
      K * (x1 - log(x1)) +
      beta * (-0.0064709595959595969 * x10 + 0.000946969696969697 * x12 +
              0.012345679012345677 * pow(x13, 4) * x14 +
              0.035353535353535352 * x15 * (x3 + x4 - x6)) +
      0.005681818181818182 * x10 + 0.037037037037037028 * x11 * pow(x13, 3) +
      0.032196969696969696 * x12 - 0.24242424242424243 * x15 * (x3 + x4 - x6);
  return phi;
}

Matrix2d stress(double C11, double C22, double C12, double beta, double K,
                double noise) {
  double x0 = C11 * C22;
  double x1 = pow(C12, 2);
  double x2 = x0 - x1;
  double x3 = 1.0 / x2;
  double x4 = pow(x2, -3.0 / 2.0);
  double x5 = pow(C22, 2) * x4;
  double x6 = pow(x2, -1.0 / 2.0);
  double x7 = -3 * x6;
  double x8 = x0 * x4;
  double x9 = x7 + (3.0 / 2.0) * x8;
  double x10 = (3.0 / 2.0) * x5 + x9;
  double x11 = C12 * x6;
  double x12 = C11 * x6;
  double x13 = C22 * x6;
  double x14 = x12 + x13;
  double x15 = -4 * x11 + x14;
  double x16 = x12 - x13;
  double x17 = pow(x16, 2);
  double x18 = -0.1111111111111111 * pow(x15, 3) + x15 * x17;
  double x19 = -x11 + x14;
  double x20 = 0.037037037037037028 * x18 * pow(x19, 2);
  double x21 = -2.6666666666666665 * x6;
  double x22 = x21 + 1.3333333333333333 * x8;
  double x23 = pow(x15, 2);
  double x24 = 0.25 * x17 + 0.083333333333333329 * x23;
  double x25 = 0.090909090909090912 * x24;
  double x26 = x18 * x25;
  double x27 = pow(x17 + 0.33333333333333331 * x23, 2);
  double x28 = 2 * x6;
  double x29 = x28 - x8;
  double x30 = x16 * (x29 + x5);
  double x31 = -x28 + x8;
  double x32 = x15 * (4 * C12 * C22 * x4 - x31 - x5);
  double x33 = x27 * (3 * x30 + 1.0 * x32);
  double x34 = 0.25 * x30 + 0.083333333333333329 * x32;
  double x35 = x18 * x34;
  double x36 = -2.6666666666666665 * x11 + 2.6666666666666665 * x12 +
               2.6666666666666665 * x13;
  double x37 = 0.090909090909090912 * x36;
  double x38 = 2 * C12;
  double x39 = x38 * x4;
  double x40 = C22 * x39;
  double x41 = -x40;
  double x42 = -x6 + (1.0 / 2.0) * x8;
  double x43 = x17 * (-x41 - x42 - 1.0 / 2.0 * x5);
  double x44 = x23 * (6 * C12 * C22 * x4 - x10);
  double x45 = x15 * x30;
  double x46 = x43 - 0.1111111111111111 * x44 + x45;
  double x47 = pow(x19, 3);
  double x48 = 0.037037037037037028 * x47;
  double x49 = x25 * x36;
  double x50 = x18 * (2 * x43 - 0.22222222222222221 * x44 + 2 * x45);
  double x51 = -4 * x6;
  double x52 = x51 + 2 * x8;
  double x53 = 0.012345679012345677 * x24 * x47;
  double x54 = 0.012345679012345677 * pow(x19, 4);
  double x55 = -2.333333333333333 * x6;
  double x56 = x55 + 1.1666666666666665 * x8;
  double x57 = 0.015151515151515152 * x24;
  double x58 = x18 * x57;
  double x59 = -2.333333333333333 * x11 + 2.333333333333333 * x12 +
               2.333333333333333 * x13;
  double x60 = 0.015151515151515152 * x59;
  double x61 = x57 * x59;
  double x62 = pow(C11, 2) * x4;
  double x63 = (3.0 / 2.0) * x62 + x9;
  double x64 = x16 * (-x29 - x62);
  double x65 = x15 * (4 * C11 * C12 * x4 - x31 - x62);
  double x66 = x27 * (3 * x64 + 1.0 * x65);
  double x67 = 0.25 * x64 + 0.083333333333333329 * x65;
  double x68 = x18 * x67;
  double x69 = -2 * C11 * C12 * x4;
  double x70 = x17 * (-x42 - 1.0 / 2.0 * x62 - x69);
  double x71 = x23 * (6 * C11 * C12 * x4 - x63);
  double x72 = x15 * x64;
  double x73 = x70 - 0.1111111111111111 * x71 + x72;
  double x74 = x18 * (2 * x70 - 0.22222222222222221 * x71 + 2 * x72);
  double x75 = x1 * x4;
  double x76 = C12 * x4;
  double x77 = C11 * x76;
  double x78 = C22 * x76;
  double x79 = 3 * x77 + 3 * x78;
  double x80 = C11 * x39;
  double x81 = x16 * (x41 + x80);
  double x82 = x15 * (x40 - 8 * x6 - 8 * x75 + x80);
  double x83 = x27 * (3 * x81 + 1.0 * x82);
  double x84 = 0.25 * x81 + 0.083333333333333329 * x82;
  double x85 = x18 * x84;
  double x86 = x51 - 4 * x75;
  double x87 = x17 * (x77 + x78 + x86);
  double x88 = x15 * x81;
  double x89 = x23 * (-12 * x6 - 12 * x75 + x79);
  double x90 = x87 + x88 - 0.1111111111111111 * x89;
  double x91 = x18 * (2 * x87 + 2 * x88 - 0.22222222222222221 * x89);

  double dPhi_dC11 =
      C22 * K * (noise - x3) +
      beta * (-0.0064709595959595969 * x33 + x34 * x54 + x35 * x60 + x46 * x61 +
              0.000946969696969697 * x50 - x53 * (x41 + 2 * x5 + x52) -
              x58 * (-1.1666666666666665 * C12 * C22 * x4 +
                     1.1666666666666665 * x5 + x56)) +
      (1.0 / 2.0) * x20 * (3 * C12 * C22 * x4 - 2 * x10) +
      x26 * (-1.3333333333333333 * C12 * C22 * x4 + x22 +
             1.3333333333333333 * x5) +
      0.005681818181818182 * x33 - x35 * x37 + x46 * x48 - x46 * x49 +
      0.032196969696969696 * x50;
  double dPhi_dC22 =
      C11 * K * (noise - x3) +
      beta * (-x53 * (x52 + 2 * x62 + x69) + x54 * x67 -
              x58 * (-1.1666666666666665 * C11 * C12 * x4 + x56 +
                     1.1666666666666665 * x62) +
              x60 * x68 + x61 * x73 - 0.0064709595959595969 * x66 +
              0.000946969696969697 * x74) +
      (1.0 / 2.0) * x20 * (3 * C11 * C12 * x4 - 2 * x63) +
      x26 * (-1.3333333333333333 * C11 * C12 * x4 + x22 +
             1.3333333333333333 * x62) -
      x37 * x68 + x48 * x73 - x49 * x73 + 0.005681818181818182 * x66 +
      0.032196969696969696 * x74;
  double dPhi_dC12 =
      K * (2 * C12 * x3 - noise * x38) +
      beta * (x53 * (4 * x77 + 4 * x78 + x86) + x54 * x84 +
              x58 * (x55 - 2.333333333333333 * x75 + 2.333333333333333 * x77 +
                     2.333333333333333 * x78) +
              x60 * x85 + x61 * x90 - 0.0064709595959595969 * x83 +
              0.000946969696969697 * x91) +
      x20 * (x7 - 3 * x75 + x79) -
      x26 * (x21 - 2.6666666666666665 * x75 + 2.6666666666666665 * x77 +
             2.6666666666666665 * x78) -
      x37 * x85 + x48 * x90 - x49 * x90 + 0.005681818181818182 * x83 +
      0.032196969696969696 * x91;

  return Matrix2d{{dPhi_dC11, dPhi_dC12 / 2}, {dPhi_dC12 / 2, dPhi_dC22}};
}

// itensor::ITensor hessian(double c11, double c22, double c12, double beta,
//                          double K, double noise) {
// double x0 = c11 * c22;
// double x1 = pow(c12, 2);
// double x2 = x0 - x1;
// double x3 = 1.0 / x2;
// double x4 = pow(x2, -1.0 / 2.0);
// double x5 = c12 * x4;
// double x6 = c11 * x4;
// double x7 = c22 * x4;
// double x8 = x6 + x7;
// double x9 = -x5 + x8;
// double x10 = pow(x9, 2);
// double x11 = pow(x2, -3.0 / 2.0);
// double x12 = pow(c22, 2);
// double x13 = x11 * x12;
// double x14 = -3 * x4;
// double x15 = x0 * x11;
// double x16 = x14 + (3.0 / 2.0) * x15;
// double x17 = (3.0 / 2.0) * x13 + x16;
// double x18 = (3.0 / 2.0) * c12 * c22 * x11 - x17;
// double x19 = x10 * x18;
// double x20 = -4 * x5 + x8;
// double x21 = x6 - x7;
// double x22 = pow(x21, 2);
// double x23 = -0.1111111111111111 * pow(x20, 3) + x20 * x22;
// double x24 = 0.037037037037037028 * x23;
// double x25 = -2.6666666666666665 * x4;
// double x26 = 1.3333333333333333 * x15 + x25;
// double x27 =
//     1.3333333333333333 * c12 * c22 * x11 - 1.3333333333333333 * x13 - x26;
// double x28 = pow(x20, 2);
// double x29 = 0.25 * x22 + 0.083333333333333329 * x28;
// double x30 = 0.090909090909090912 * x29;
// double x31 = x23 * x30;
// double x32 = x22 + 0.33333333333333331 * x28;
// double x33 = pow(x32, 2);
// double x34 = 2 * x4;
// double x35 = -x15 + x34;
// double x36 = x13 + x35;
// double x37 = x21 * x36;
// double x38 = -x34;
// double x39 = x15 + x38;
// double x40 = x13 + x39;
// double x41 = 4 * c12 * c22 * x11 - x40;
// double x42 = x20 * x41;
// double x43 = 3 * x37 + x42;
// double x44 = x33 * x43;
// double x45 = 0.25 * x37 + 0.083333333333333329 * x42;
// double x46 = x23 * x45;
// double x47 = -2.6666666666666665 * x5 + 2.6666666666666665 * x6 +
//              2.6666666666666665 * x7;
// double x48 = 0.090909090909090912 * x47;
// double x49 = c22 * x11;
// double x50 = c12 * x49;
// double x51 = 2 * x50;
// double x52 = -x51;
// double x53 = (1.0 / 2.0) * x13;
// double x54 = (1.0 / 2.0) * x15;
// double x55 = -x4 + x54;
// double x56 = -x52 - x53 - x55;
// double x57 = x22 * x56;
// double x58 = 6 * c12 * c22 * x11 - x17;
// double x59 = x28 * x58;
// double x60 = x20 * x37;
// double x61 = x57 - 0.1111111111111111 * x59 + x60;
// double x62 = pow(x9, 3);
// double x63 = 0.037037037037037028 * x62;
// double x64 = x30 * x47;
// double x65 = 2 * x57 - 0.22222222222222221 * x59 + 2 * x60;
// double x66 = x23 * x65;
// double x67 = -4 * x4;
// double x68 = 2 * x15 + x67;
// double x69 = -2 * x13 - x52 - x68;
// double x70 = x62 * x69;
// double x71 = 0.012345679012345677 * x29;
// double x72 = 0.012345679012345677 * pow(x9, 4);
// double x73 = 0.015151515151515152 * x29;
// double x74 = -2.333333333333333 * x4;
// double x75 = 1.1666666666666665 * x15 + x74;
// double x76 =
//     1.1666666666666665 * c12 * c22 * x11 - 1.1666666666666665 * x13 - x75;
// double x77 = x23 * x76;
// double x78 =
//     -2.333333333333333 * x5 + 2.333333333333333 * x6 + 2.333333333333333 *
//     x7;
// double x79 = 0.015151515151515152 * x78;
// double x80 = x73 * x78;
// double x81 = pow(c11, 2);
// double x82 = x11 * x81;
// double x83 = x16 + (3.0 / 2.0) * x82;
// double x84 = (3.0 / 2.0) * c11 * c12 * x11 - x83;
// double x85 = x10 * x24;
// double x86 =
//     1.3333333333333333 * c11 * c12 * x11 - x26 - 1.3333333333333333 * x82;
// double x87 = -x35 - x82;
// double x88 = x21 * x87;
// double x89 = x39 + x82;
// double x90 = 4 * c11 * c12 * x11 - x89;
// double x91 = x20 * x90;
// double x92 = 3 * x88 + x91;
// double x93 = x33 * x92;
// double x94 = 0.25 * x88 + 0.083333333333333329 * x91;
// double x95 = x23 * x94;
// double x96 = (1.0 / 2.0) * x82;
// double x97 = -2 * c11 * c12 * x11;
// double x98 = -x55 - x96 - x97;
// double x99 = x22 * x98;
// double x100 = 6 * c11 * c12 * x11 - x83;
// double x101 = x100 * x28;
// double x102 = x20 * x88;
// double x103 = -0.1111111111111111 * x101 + x102 + x99;
// double x104 = -0.22222222222222221 * x101 + 2 * x102 + 2 * x99;
// double x105 = x104 * x23;
// double x106 = -x68 - 2 * x82 - x97;
// double x107 = x62 * x71;
// double x108 =
//     1.1666666666666665 * c11 * c12 * x11 - x75 - 1.1666666666666665 * x82;
// double x109 = x23 * x73;
// double x110 = 2 * noise;
// double x111 = x1 * x11;
// double x112 = c11 * x11;
// double x113 = c12 * x112;
// double x114 = 3 * x113 + 3 * x50;
// double x115 = -3 * x111 + x114 + x14;
// double x116 = 2 * x113;
// double x117 = x116 + x52;
// double x118 = x117 * x21;
// double x119 = x116 + x51;
// double x120 = -8 * x111 + x119 - 8 * x4;
// double x121 = x120 * x20;
// double x122 = 3 * x118 + x121;
// double x123 = x122 * x33;
// double x124 = -2.6666666666666665 * x111 + 2.6666666666666665 * x113 + x25 +
//               2.6666666666666665 * x50;
// double x125 = 0.25 * x118 + 0.083333333333333329 * x121;
// double x126 = x125 * x23;
// double x127 = -4 * x111 + x67;
// double x128 = x113 + x127 + x50;
// double x129 = x128 * x22;
// double x130 = x118 * x20;
// double x131 = -12 * x111 + x114 - 12 * x4;
// double x132 = x131 * x28;
// double x133 = x129 + x130 - 0.1111111111111111 * x132;
// double x134 = 2 * x129 + 2 * x130 - 0.22222222222222221 * x132;
// double x135 = x134 * x23;
// double x136 = 4 * x113 + x127 + 4 * x50;
// double x137 = -2.333333333333333 * x111 + 2.333333333333333 * x113 +
//               2.333333333333333 * x50 + x74;
// double x138 = pow(x2, -2);
// double x139 = K * x138;
// double x140 = pow(x2, -5.0 / 2.0);
// double x141 = x12 * x140;
// double x142 = c12 * x141;
// double x143 = pow(c22, 3) * x140;
// double x144 = 3 * x49;
// double x145 = c11 * x141;
// double x146 = -x144 + (9.0 / 4.0) * x145;
// double x147 = (9.0 / 4.0) * x143 + x146;
// double x148 = 2.6666666666666665 * x49;
// double x149 = 2.0 * x145 - x148;
// double x150 = -x50;
// double x151 = x24 * x9;
// double x152 = x151 * x18;
// double x153 = 0.18181818181818182 * x27;
// double x154 = 2 * x37;
// double x155 = x43 * (x154 + 0.66666666666666663 * x42);
// double x156 = 0.005681818181818182 * x32;
// double x157 = (3.0 / 2.0) * x143;
// double x158 = 2 * x49;
// double x159 = (3.0 / 2.0) * x145;
// double x160 = x158 - x159;
// double x161 = x21 * (-x157 - x160);
// double x162 = x4 - x54;
// double x163 = x36 * (x162 + x53);
// double x164 = -6 * x142;
// double x165 = -x158;
// double x166 = x159 + x165;
// double x167 = x20 * (x157 + x164 + x166);
// double x168 = x41 * x56;
// double x169 = x33 * (3 * x161 + 3 * x163 + x167 + x168);
// double x170 = 0.18181818181818182 * x47;
// double x171 = 0.25 * x161 + 0.25 * x163 + 0.083333333333333329 * x167 +
//               0.083333333333333329 * x168;
// double x172 = x171 * x23;
// double x173 = x61 * x65;
// double x174 = 3 * x142;
// double x175 = -x174;
// double x176 = (3.0 / 4.0) * x145 - x49;
// double x177 = x22 * ((3.0 / 4.0) * x143 + x175 + x176);
// double x178 = x28 * (-9 * x142 + x147);
// double x179 = x161 * x20;
// double x180 = x163 * x20;
// double x181 = x42 * x58;
// double x182 = x154 * x56 + x177 - 0.1111111111111111 * x178 + x179 + x180 -
//               0.1111111111111111 * x181;
// double x183 = x23 * (2 * x177 - 0.22222222222222221 * x178 + 2 * x179 +
//                      2 * x180 - 0.22222222222222221 * x181 + 4 * x37 * x56);
// double x184 = 4 * x49;
// double x185 = 3 * x145 - x184;
// double x186 = x69 * x71;
// double x187 = 2.333333333333333 * x49;
// double x188 = 1.7499999999999998 * x145 - x187;
// double x189 = 0.0064709595959595969 * x32;
// double x190 = 0.030303030303030304 * x61;
// double x191 = x140 * x81;
// double x192 = c12 * x191;
// double x193 = pow(c11, 3) * x140;
// double x194 = 3 * x112;
// double x195 = c22 * x191;
// double x196 = -x194 + (9.0 / 4.0) * x195;
// double x197 = (9.0 / 4.0) * x193 + x196;
// double x198 = 2.6666666666666665 * x112;
// double x199 = 2.0 * x195 - x198;
// double x200 = c11 * c12 * x11 - x89;
// double x201 = 0.18181818181818182 * x86;
// double x202 = 0.074074074074074056 * x10;
// double x203 = 2 * x88;
// double x204 = x203 + 0.66666666666666663 * x91;
// double x205 = x204 * x92;
// double x206 = x103 * x29;
// double x207 = 2 * x112;
// double x208 = (3.0 / 2.0) * x193;
// double x209 = (3.0 / 2.0) * x195;
// double x210 = x21 * (x207 + x208 - x209);
// double x211 = -x162 - x96;
// double x212 = x211 * x87;
// double x213 = -6 * x192;
// double x214 = -x207 + x209;
// double x215 = x20 * (x208 + x213 + x214);
// double x216 = x90 * x98;
// double x217 = x33 * (3 * x210 + 3 * x212 + x215 + x216);
// double x218 = x103 * x94;
// double x219 = 0.25 * x210 + 0.25 * x212 + 0.083333333333333329 * x215 +
//               0.083333333333333329 * x216;
// double x220 = x219 * x23;
// double x221 = x103 * x104;
// double x222 = 3 * x192;
// double x223 = -x222;
// double x224 = -x112 + (3.0 / 4.0) * x195;
// double x225 = x22 * ((3.0 / 4.0) * x193 + x223 + x224);
// double x226 = x28 * (-9 * x192 + x197);
// double x227 = x20 * x210;
// double x228 = x20 * x212;
// double x229 = x100 * x91;
// double x230 = x203 * x98 + x225 - 0.1111111111111111 * x226 + x227 + x228 -
//               0.1111111111111111 * x229;
// double x231 = x23 * (2 * x225 - 0.22222222222222221 * x226 + 2 * x227 +
//                      2 * x228 - 0.22222222222222221 * x229 + 4 * x88 * x98);
// double x232 = 4 * x112;
// double x233 = 3 * x195 - x232;
// double x234 = x10 * x71;
// double x235 = x106 * x234;
// double x236 = 2.333333333333333 * x112;
// double x237 = 1.7499999999999998 * x195 - x236;
// double x238 = 0.024691358024691353 * x62;
// double x239 = 0.030303030303030304 * x108;
// double x240 = 0.030303030303030304 * x78;
// double x241 = c12 * x11;
// double x242 = pow(c12, 3) * x140;
// double x243 = x1 * x140;
// double x244 = 9 * x243;
// double x245 = c11 * x244 + c22 * x244 + x144 + x194;
// double x246 = -2 * x111 + x119 + x38;
// double x247 = 8.0 * x243;
// double x248 = 0.18181818181818182 * x124;
// double x249 = 2 * x118;
// double x250 = 0.66666666666666663 * x121 + x249;
// double x251 = x122 * x250;
// double x252 = x133 * x29;
// double x253 = x113 + x150;
// double x254 = x117 * x253;
// double x255 = 6 * x243;
// double x256 = c22 * x255;
// double x257 = c11 * x255 + x207;
// double x258 = x21 * (x165 - x256 + x257);
// double x259 = x120 * x128;
// double x260 = x158 + x256;
// double x261 = x20 * (-24 * x241 - 24 * x242 + x257 + x260);
// double x262 = x33 * (3 * x254 + 3 * x258 + x259 + x261);
// double x263 = x125 * x133;
// double x264 = 0.25 * x254 + 0.25 * x258 + 0.083333333333333329 * x259 +
//               0.083333333333333329 * x261;
// double x265 = x23 * x264;
// double x266 = x133 * x134;
// double x267 = x20 * x254;
// double x268 = 3 * x243;
// double x269 = -12 * x241 - 12 * x242;
// double x270 = x22 * (c11 * x268 + c22 * x268 + x112 + x269 + x49);
// double x271 = x20 * x258;
// double x272 = x28 * (-36 * x241 - 36 * x242 + x245);
// double x273 = x121 * x131;
// double x274 = x128 * x249 + x267 + x270 + x271 - 0.1111111111111111 * x272 -
//               0.1111111111111111 * x273;
// double x275 = x23 * (4 * x118 * x128 + 2 * x267 + 2 * x270 + 2 * x271 -
//                      0.22222222222222221 * x272 - 0.22222222222222221 *
//                      x273);
// double x276 = 12 * x243;
// double x277 = c22 * x276 + x184;
// double x278 = c11 * x276 + x232;
// double x279 = 6.9999999999999991 * x243;
// double x280 = 0.030303030303030304 * x137;
// double x281 = c12 * x0 * x140;
// double x282 = x146 + x196;
// double x283 = 0.090909090909090912 * x27;
// double x284 = 0.090909090909090912 * x46;
// double x285 = x204 * x43;
// double x286 = x27 * x30;
// double x287 = x30 * x61;
// double x288 = x211 * x36;
// double x289 = x21 * (x160 + x214);
// double x290 = x41 * x98;
// double x291 = 4 * x241 - 6 * x281;
// double x292 = x20 * (x166 + x214 + x291);
// double x293 = x33 * (3 * x288 + 3 * x289 + x290 + x292);
// double x294 = x61 * x94;
// double x295 = x103 * x45;
// double x296 = 0.25 * x288 + 0.25 * x289 + 0.083333333333333329 * x290 +
//               0.083333333333333329 * x292;
// double x297 = x23 * x296;
// double x298 = x103 * x65;
// double x299 = 2 * x241 - 3 * x281;
// double x300 = x22 * (x176 + x224 + x299);
// double x301 = x20 * x288;
// double x302 = x20 * x289;
// double x303 = x28 * (6 * x241 - 9 * x281 + x282);
// double x304 = x58 * x91;
// double x305 = x300 + x301 + x302 - 0.1111111111111111 * x303 -
//               0.1111111111111111 * x304 + x37 * x98 + x56 * x88;
// double x306 = x23 * (x154 * x98 + x203 * x56 + 2 * x300 + 2 * x301 + 2 * x302
// -
//                      0.22222222222222221 * x303 - 0.22222222222222221 *
//                      x304);
// double x307 = x10 * x186;
// double x308 = 0.012345679012345677 * x70;
// double x309 = 0.012345679012345677 * x62;
// double x310 = x309 * x45;
// double x311 = 0.015151515151515152 * x77;
// double x312 = 0.015151515151515152 * x46;
// double x313 = x73 * x76;
// double x314 = x61 * x73;
// double x315 = 2 * c12 * x139;
// double x316 = c22 * x243;
// double x317 = 3 * x241 - 9.0 / 2.0 * x281;
// double x318 = -9.0 / 2.0 * x142 + x317;
// double x319 = 2.6666666666666665 * x241 - 4.0 * x281;
// double x320 = x253 * x36;
// double x321 = x21 * (x174 + x299);
// double x322 = x128 * x41;
// double x323 = x20 * (x175 + x277 + x299);
// double x324 = 3 * x320 + 3 * x321 + x322 + x323;
// double x325 = x125 * x61;
// double x326 = x133 * x45;
// double x327 = 0.25 * x320 + 0.25 * x321 + 0.083333333333333329 * x322 +
//               0.083333333333333329 * x323;
// double x328 = x23 * x327;
// double x329 = x241 - 3.0 / 2.0 * x281;
// double x330 = x22 * (-3.0 / 2.0 * x142 + x260 + x329);
// double x331 = x20 * x320;
// double x332 = x20 * x321;
// double x333 = x28 * (18 * x316 + x318 + 6 * x49);
// double x334 = x121 * x58;
// double x335 = x118 * x56 + x128 * x37 + x330 + x331 + x332 -
//               0.1111111111111111 * x333 - 0.1111111111111111 * x334;
// double x336 = x128 * x154 + x249 * x56 + 2 * x330 + 2 * x331 + 2 * x332 -
//               0.22222222222222221 * x333 - 0.22222222222222221 * x334;
// double x337 = 2.333333333333333 * x241 - 3.4999999999999996 * x281;
// double x338 = c11 * x243;
// double x339 = -9.0 / 2.0 * x192 + x317;
// double x340 = x253 * x87;
// double x341 = x21 * (-x222 - x299);
// double x342 = x128 * x90;
// double x343 = x20 * (x223 + x278 + x299);
// double x344 = 3 * x340 + 3 * x341 + x342 + x343;
// double x345 = x103 * x125;
// double x346 = x133 * x94;
// double x347 = 0.25 * x340 + 0.25 * x341 + 0.083333333333333329 * x342 +
//               0.083333333333333329 * x343;
// double x348 = x23 * x347;
// double x349 = x22 * (-3.0 / 2.0 * x192 + x257 + x329);
// double x350 = x20 * x340;
// double x351 = x20 * x341;
// double x352 = x28 * (6 * x112 + 18 * x338 + x339);
// double x353 = x100 * x121;
// double x354 = x118 * x98 + x128 * x88 + x349 + x350 + x351 -
//               0.1111111111111111 * x352 - 0.1111111111111111 * x353;
// double x355 = x128 * x203 + x249 * x98 + 2 * x349 + 2 * x350 + 2 * x351 -
//               0.22222222222222221 * x352 - 0.22222222222222221 * x353;

// double dPhi_dC11 =
//     K * c22 * (noise - x3) +
//     beta * (-0.0064709595959595969 * x44 + x45 * x72 + x46 * x79 + x61 * x80
//     +
//             0.000946969696969697 * x66 + x70 * x71 + x73 * x77) +
//     x19 * x24 - x27 * x31 + 0.005681818181818182 * x44 - x46 * x48 + x61 *
//     x63 - x61 * x64 + 0.032196969696969696 * x66;
// double dPhi_dC22 =
//     K * c11 * (noise - x3) +
//     beta * (x103 * x80 + 0.000946969696969697 * x105 + x106 * x107 +
//             x108 * x109 + x72 * x94 + x79 * x95 - 0.0064709595959595969 *
//             x93) +
//     x103 * x63 - x103 * x64 + 0.032196969696969696 * x105 - x31 * x86 -
//     x48 * x95 + x84 * x85 + 0.005681818181818182 * x93;
// double dPhi_dC12 =
//     -K * c12 * (x110 - 2 * x3) +
//     beta *
//         (x107 * x136 + x109 * x137 - 0.0064709595959595969 * x123 + x125 *
//         x72 +
//          x126 * x79 + x133 * x80 + 0.000946969696969697 * x135) +
//     x115 * x85 + 0.005681818181818182 * x123 - x124 * x31 - x126 * x48 +
//     x133 * x63 - x133 * x64 + 0.032196969696969696 * x135;
// double dPhi_dC11_dC11 =
//     beta * (x107 * (3 * x143 + x175 + x185) +
//             x109 * (-1.7499999999999998 * x142 + 1.7499999999999998 * x143 +
//                     x188) -
//             x155 * x189 - 0.0064709595959595969 * x169 + x171 * x72 +
//             x172 * x79 + 0.000946969696969697 * x173 + x182 * x80 +
//             0.000946969696969697 * x183 + x186 * x19 + x190 * x29 * x76 +
//             x190 * x45 * x78 + 0.024691358024691353 * x45 * x70 +
//             0.030303030303030304 * x45 * x77) +
//     x12 * x139 - x152 * (x150 + x40) - x153 * x29 * x61 - x153 * x46 +
//     x155 * x156 + 0.005681818181818182 * x169 - x170 * x45 * x61 - x172 * x48
//     + 0.032196969696969696 * x173 + x182 * x63 - x182 * x64 +
//     0.032196969696969696 * x183 + 0.074074074074074056 * x19 * x61 -
//     x31 * (-2.0 * x142 + 2.0 * x143 + x149) -
//     1.0 / 4.0 * x85 * (9 * x142 - 4 * x147);
// double dPhi_dC22_dC22 =
//     beta *
//         (x106 * x238 * x94 + x107 * (3 * x193 + x223 + x233) +
//          x109 *
//              (-1.7499999999999998 * x192 + 1.7499999999999998 * x193 + x237)
//              -
//          x189 * x205 + x206 * x239 - 0.0064709595959595969 * x217 +
//          x218 * x240 + x219 * x72 + x220 * x79 + 0.000946969696969697 * x221
//          + x230 * x80 + 0.000946969696969697 * x231 + x235 * x84 + x239 *
//          x95) +
//     x103 * x202 * x84 + x139 * x81 + x151 * x200 * x84 + x156 * x205 -
//     x170 * x218 - x201 * x206 - x201 * x95 + 0.005681818181818182 * x217 -
//     x220 * x48 + 0.032196969696969696 * x221 + x230 * x63 - x230 * x64 +
//     0.032196969696969696 * x231 - x31 * (-2.0 * x192 + 2.0 * x193 + x199) -
//     1.0 / 4.0 * x85 * (9 * x192 - 4 * x197);
// double dPhi_dC12_dC12 =
//     K * (4 * x1 * x138 - x110 + 2 * x3) +
//     beta *
//         (x107 * (x269 + x277 + x278) +
//          x109 * (c11 * x279 + c22 * x279 + x187 + x236 -
//                  6.9999999999999991 * x241 - 6.9999999999999991 * x242) +
//          x115 * x136 * x234 + x125 * x136 * x238 + x126 * x280 - x189 * x251
//          + x240 * x263 + x252 * x280 - 0.0064709595959595969 * x262 + x264 *
//          x72 + x265 * x79 + 0.000946969696969697 * x266 + x274 * x80 +
//          0.000946969696969697 * x275) +
//     x115 * x133 * x202 + x115 * x151 * x246 - x126 * x248 + x156 * x251 -
//     x170 * x263 - x248 * x252 + 0.005681818181818182 * x262 - x265 * x48 +
//     0.032196969696969696 * x266 + x274 * x63 - x274 * x64 +
//     0.032196969696969696 * x275 -
//     x31 * (c11 * x247 + c22 * x247 + x148 + x198 - 8.0 * x241 - 8.0 * x242) -
//     x85 * (9 * x241 + 9 * x242 - x245);
// double dPhi_dC11_dC22 =
//     K * (noise + x0 * x138 - x3) +
//     beta *
//         (x103 * x313 + x106 * x310 + x107 * (x185 + x233 + x299) + x108 *
//         x312 +
//          x108 * x314 +
//          x109 * (x188 + x237 + 1.1666666666666665 * x241 -
//                  1.7499999999999998 * x281) -
//          x189 * x285 - 0.0064709595959595969 * x293 + x294 * x79 + x295 * x79
//          + x296 * x72 + x297 * x79 + 0.000946969696969697 * x298 + x305 * x80
//          + 0.000946969696969697 * x306 + x307 * x84 + x308 * x94 + x311 *
//          x94) +
//     0.037037037037037028 * x10 * x61 * x84 + 0.037037037037037028 * x103 *
//     x19 - x103 * x286 + x152 * x200 + x156 * x285 - x283 * x95 - x284 * x86 -
//     x287 * x86 + 0.005681818181818182 * x293 - x294 * x48 - x295 * x48 -
//     x297 * x48 + 0.032196969696969696 * x298 + x305 * x63 - x305 * x64 +
//     0.032196969696969696 * x306 -
//     x31 * (x149 + x199 + 1.3333333333333333 * x241 - 2.0 * x281) +
//     (1.0 / 4.0) * x85 * (6 * x241 - 9 * x281 + 4 * x282);
// double dPhi_dC11_dC12 =
//     beta *
//         (x107 * (x164 + x260 + x291) +
//          x109 * (-3.4999999999999996 * x142 + 3.4999999999999996 * x316 +
//          x337 +
//                  1.1666666666666665 * x49) +
//          x115 * x307 + x125 * x308 + x125 * x311 + x133 * x313 +
//          0.000946969696969697 * x133 * x65 + x136 * x310 + x137 * x312 +
//          x137 * x314 - x189 * x250 * x43 + 0.000946969696969697 * x23 * x336
//          - 0.0064709595959595969 * x324 * x33 + x325 * x79 + x326 * x79 +
//          x327 * x72 + x328 * x79 + x335 * x80) -
//     c22 * x315 + 0.037037037037037028 * x10 * x115 * x61 +
//     0.037037037037037028 * x10 * x133 * x18 +
//     0.018518518518518514 * x10 * x23 * (9 * x316 + 2 * x318 + 3 * x49) -
//     x124 * x284 - x124 * x287 - x126 * x283 - x133 * x286 +
//     0.032196969696969696 * x133 * x65 +
//     0.037037037037037028 * x18 * x23 * x246 * x9 +
//     0.032196969696969696 * x23 * x336 +
//     0.005681818181818182 * x250 * x32 * x43 -
//     x31 * (-4.0 * x142 + 4.0 * x316 + x319 + 1.3333333333333333 * x49) +
//     0.005681818181818182 * x324 * x33 - x325 * x48 - x326 * x48 - x328 * x48
//     + 0.037037037037037028 * x335 * x62 - x335 * x64;
// double dPhi_dC22_dC12 =
//     beta *
//         (x103 * x137 * x73 + 0.000946969696969697 * x104 * x133 +
//          x106 * x125 * x309 + x107 * (x213 + x257 + x291) +
//          0.015151515151515152 * x108 * x126 + x108 * x133 * x73 +
//          x109 * (1.1666666666666665 * x112 - 3.4999999999999996 * x192 + x337
//          +
//                  3.4999999999999996 * x338) +
//          x115 * x235 + x136 * x309 * x94 + 0.015151515151515152 * x137 * x95
//          - x189 * x250 * x92 + 0.000946969696969697 * x23 * x355 -
//          0.0064709595959595969 * x33 * x344 + x345 * x79 + x346 * x79 +
//          x347 * x72 + x348 * x79 + x354 * x80) -
//     c11 * x315 + 0.037037037037037028 * x10 * x103 * x115 +
//     0.037037037037037028 * x10 * x133 * x84 +
//     0.018518518518518514 * x10 * x23 * (3 * x112 + 9 * x338 + 2 * x339) -
//     x103 * x124 * x30 + 0.032196969696969696 * x104 * x133 -
//     0.090909090909090912 * x124 * x95 - 0.090909090909090912 * x126 * x86 -
//     x133 * x30 * x86 + 0.037037037037037028 * x23 * x246 * x84 * x9 +
//     0.032196969696969696 * x23 * x355 +
//     0.005681818181818182 * x250 * x32 * x92 -
//     x31 * (1.3333333333333333 * x112 - 4.0 * x192 + x319 + 4.0 * x338) +
//     0.005681818181818182 * x33 * x344 - x345 * x48 - x346 * x48 - x348 * x48
//     + 0.037037037037037028 * x354 * x62 - x354 * x64;

//   // First derivative
//   Matrix2d stress = Matrix2d{{dPhi_dC11, dPhi_dC12 / 2}, //
//                              {dPhi_dC12 / 2, dPhi_dC22}};

//   // Second derivative
//   Matrix2d topLeft = Matrix2d{{dPhi_dC11_dC11, dPhi_dC11_dC12 / 2},
//                               {dPhi_dC11_dC12 / 2, dPhi_dC11_dC22}};

//   Matrix2d topRight = Matrix2d{{dPhi_dC11_dC12 / 2, dPhi_dC12_dC12 / 4},
//                                {dPhi_dC12_dC12 / 4, dPhi_dC22_dC12 / 2}};

//   Matrix2d bottomRight = Matrix2d{{dPhi_dC11_dC22, dPhi_dC11_dC12 / 2},
//                                   {dPhi_dC11_dC12 / 2, dPhi_dC22_dC22}};

//   std::vector<std::vector<Matrix2d>> matrices = {{topLeft, topRight},
//                                                  {stress, bottomRight}};

//   // Create a 2x2x2x2 ITensor
//   auto i = itensor::Index(2, "i");
//   auto j = itensor::Index(2, "j");
//   auto k = itensor::Index(2, "k");
//   auto l = itensor::Index(2, "l");

//   itensor::ITensor tensor(i, j, k, l);

//   for (int i1 = 1; i1 <= 2; ++i1) {
//     for (int j1 = 1; j1 <= 2; ++j1) {
//       for (int k1 = 1; k1 <= 2; ++k1) {
//         for (int l1 = 1; l1 <= 2; ++l1) {
//           tensor.set(i(i1), j(j1), k(k1), l(l1),
//                      matrices[i1 - 1][j1 - 1](k1 - 1, l1 - 1));
//         }
//       }
//     }
//   }
//   return tensor;
// }

} // namespace ContiPotential
