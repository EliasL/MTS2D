#include "cell.h"

Cell::Cell(const Triangle &triangle)
{
    // Calculates D
    m_getDeformationGradiant(triangle);

    // Calculates C
    C = triangle.metric(METRICFUNCTION);

    // Calculate C_ and m
    m_lagrangeReduction();

    // Calculate energy and reduced stress
    m_calculate_energy_and_reduced_stress();
};

Cell::Cell()
{
}

// Calculate Piola stress tensor and force on each node from current cell
// Note that each node is part of multiple cells. Therefore, the force must
// be reset after each itteration.
void Cell::setForcesOnNodes(Triangle &triangle)
{

    // extended stress is not quite the "real" stress, but it is a component
    // in calculating the piola stress, which is the real stress on the cell,
    // and we can then find the force on each individual node.
    // The name extended_stress does not have much meaning.
    // TODO consider storing this variable in the cell, such that it does
    // not have to be allocated every time the function is called.
    // TODO I think i might have to use m.transpose here.
    Matrix2x2<double> extended_stress = r_s.sym_orth_conjugate(m);
    // TODO THIS IS WRONG
    P[0][0] = 2 * extended_stress[0][0] * F[0][0] + extended_stress[0][1] * F[1][0];
    P[1][0] = 2 * extended_stress[0][0] * F[0][1] + extended_stress[0][1] * F[1][1];
    P[0][1] = 2 * extended_stress[1][1] * F[1][0] + extended_stress[0][1] * F[0][0];
    P[1][1] = 2 * extended_stress[1][1] * F[1][1] + extended_stress[0][1] * F[0][1];
    // The assignment here is dependant on the shape of the cell.
    // For triangular shapes, the forces on the nodes is applied as shown
    // below. For a general shape, see Gael-notes page 2, partial N^i / partial x_j
    // on how to calculate.

    // DO GENERAL DISTRIBUTION of Piola stress

    // FORCES SHOULD BE RESET AFTER EACH ITERATION
    // MUST SUM (+=) BECAUSE THEY ARE THE SAME NODES THAT ARE IN A FLIPPED TRIANGLE
    triangle.a1->f_x += -P[0][0] - P[0][1];
    triangle.a1->f_y += -P[1][0] - P[1][1];

    triangle.a2->f_x += P[0][0];
    triangle.a2->f_y += P[1][0];

    triangle.a3->f_x += P[0][1];
    triangle.a3->f_y += P[1][1];
}

void Cell::m_getDeformationGradiant(const Triangle &triangle)
{
    // Arbitrary choice of vectors from triangle
    auto e1_ = triangle.e12();
    auto e2_ = triangle.e13();

    F[0][0] = e1_[0];
    F[1][0] = e1_[1];
    F[0][1] = e2_[0];
    F[1][1] = e2_[1];
}

void Cell::m_lagrangeReduction()
{
    // We start by copying the values from C to the reduced matrix
    C_ = C;

    if (LINEARITY)
    {
        // If we assume linearity, we are done. m is already identity.
        return;
    }
    // And then we follow an algorithm generate both m and C_
    while (C_[0][1] < 0 || C_[1][1] < C_[0][0] || 2 * C_[0][1] > C_[0][0])
    {

        if (C_[0][1] < 0)
        {
            C_.flip(0, 1);
            m.lag_m1();
        }

        if (C_[1][1] < C_[0][0])
        {
            C_.swap(0, 0, 1, 1);
            m.lag_m2();
        }

        if (2 * C_[0][1] > C_[0][0])
        {
            // The order here matters, don't modify C_[0][1] before using it
            // to calculate C_[1][1].
            C_[1][1] += C_[0][0] - 2 * C_[0][1];
            C_[0][1] -= C_[0][0];
            m.lag_m3();
        }
    }
}

void Cell::m_calculate_energy_and_reduced_stress()
{
    double burgers = 1.;
    double beta = -0.25;
    double K = 4.;

    // Uses the reduced metrics
    double c11 = C_[0][0];
    double c22 = C_[1][1];
    double c12 = C_[0][1];

    energy = -K * (log((c11 * c22 - c12 * c12) / burgers) - (c11 * c22 - c12 * c12) / burgers) + beta * (pow(1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22), 2.0) * 9.46969696969697E-4 - pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 3.0) * (4.1E1 / 9.9E1) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 4.0) * (1.0 / 8.1E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (7.0 / 1.98E2)) + pow(1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22), 2.0) * (1.7E1 / 5.28E2) + pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 3.0) * (4.0 / 1.1E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (1.0 / 2.7E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (8.0 / 3.3E1);

    // TODO zeroing energy
    //energy -= s.zeroing_energy;
    r_s[0][0] = -beta * (pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (1.0 / 6.0) - c12 * (2.0 / 3.0) + c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) - c22 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (4.1E1 / 3.3E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) + c22 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.0 / 5.28E2) - ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 3.0) * (4.0 / 8.1E1) - 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 4.0) * ((c11 * (1.0 / 6.0) - c12 * (2.0 / 3.0) + c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) - c22 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (1.0 / 8.1E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (7.0 / 1.98E2) + c22 * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0) * pow(c11 - c12 + c22, 4.0) * (2.0 / 8.1E1) - ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) + c22 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (7.0 / 1.98E2) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * ((c11 * (1.0 / 6.0) - c12 * (2.0 / 3.0) + c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) - c22 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (7.0 / 1.98E2) - c22 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (7.0 / 3.96E2)) + K * (c22 / burgers - c22 / (c11 * c22 - c12 * c12)) + pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (1.0 / 6.0) - c12 * (2.0 / 3.0) + c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) - c22 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (1.2E1 / 1.1E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) + c22 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.7E1 / 2.64E2) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) + c22 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.0 / 2.7E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 2.0) * (1.0 / 9.0) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (8.0 / 3.3E1) + c22 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (1.0 / 1.8E1) - ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) + c22 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (8.0 / 3.3E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * ((c11 * (1.0 / 6.0) - c12 * (2.0 / 3.0) + c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) - c22 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) - c22 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (8.0 / 3.3E1) - c22 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (4.0 / 3.3E1);

    r_s[1][1] = beta * (pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (-1.0 / 6.0) + c12 * (2.0 / 3.0) - c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) + c11 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (4.1E1 / 3.3E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (-pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) - c11 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.0 / 5.28E2) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 3.0) * (4.0 / 8.1E1) - 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 4.0) * ((c11 * (-1.0 / 6.0) + c12 * (2.0 / 3.0) - c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) + c11 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (1.0 / 8.1E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (7.0 / 1.98E2) - c11 * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0) * pow(c11 - c12 + c22, 4.0) * (2.0 / 8.1E1) - ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (-pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) - c11 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (7.0 / 1.98E2) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * ((c11 * (-1.0 / 6.0) + c12 * (2.0 / 3.0) - c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) + c11 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (7.0 / 1.98E2) + c11 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (7.0 / 3.96E2)) + K * (c11 / burgers - c11 / (c11 * c22 - c12 * c12)) - pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (-1.0 / 6.0) + c12 * (2.0 / 3.0) - c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) + c11 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (1.2E1 / 1.1E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (-pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) - c11 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.7E1 / 2.64E2) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (-pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) - c11 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (1.0 / 2.7E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 2.0) * (1.0 / 9.0) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (8.0 / 3.3E1) + c11 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (1.0 / 1.8E1) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (-pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 3.0) - c11 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 6.0) + 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 * 2.0 - c22 * 2.0) * (c11 - c12 * 4.0 + c22) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * (3.0 / 2.0)) * (8.0 / 3.3E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * ((c11 * (-1.0 / 6.0) + c12 * (2.0 / 3.0) - c22 * (1.0 / 6.0)) / (c11 * c22 - c12 * c12) + (c11 * (1.0 / 2.0) - c22 * (1.0 / 2.0)) / (c11 * c22 - c12 * c12) + c11 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1) + c11 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 4.0)) * (8.0 / 3.3E1) - c11 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (4.0 / 3.3E1);

    r_s[1][0] = r_s[0][1] = pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (-2.0 / 3.0) + c12 * (8.0 / 3.0) - c22 * (2.0 / 3.0)) / (c11 * c22 - c12 * c12) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 6.0) + c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 2.0)) * (1.2E1 / 1.1E1) - K * ((c12 * 2.0) / burgers - (c12 * 2.0) / (c11 * c22 - c12 * c12)) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * 4.0 - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (4.0 / 3.0) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 3.0) - c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * 3.0) * (1.7E1 / 2.64E2) - beta * (pow((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12), 2.0) * ((c11 * (-2.0 / 3.0) + c12 * (8.0 / 3.0) - c22 * (2.0 / 3.0)) / (c11 * c22 - c12 * c12) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 6.0) + c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 2.0)) * (4.1E1 / 3.3E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * 4.0 - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (4.0 / 3.0) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 3.0) - c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * 3.0) * (1.0 / 5.28E2) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 + c22, 3.0) * (4.0 / 8.1E1) - 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * ((c11 * (-2.0 / 3.0) + c12 * (8.0 / 3.0) - c22 * (2.0 / 3.0)) / (c11 * c22 - c12 * c12) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 6.0) + c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 2.0)) * pow(c11 - c12 + c22, 4.0) * (1.0 / 8.1E1) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (7.0 / 1.98E2) - c12 * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0) * pow(c11 - c12 + c22, 4.0) * (4.0 / 8.1E1) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * 4.0 - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (4.0 / 3.0) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 3.0) - c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * 3.0) * (7.0 / 1.98E2) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * ((c11 * (-2.0 / 3.0) + c12 * (8.0 / 3.0) - c22 * (2.0 / 3.0)) / (c11 * c22 - c12 * c12) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 6.0) + c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 2.0)) * (c11 - c12 + c22) * (7.0 / 1.98E2) + c12 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (7.0 / 1.98E2)) - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * 4.0 - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (4.0 / 3.0) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 3.0) - c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * 3.0) * (1.0 / 2.7E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 + c22, 2.0) * (1.0 / 9.0) - (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (8.0 / 3.3E1) - c12 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 + c22, 3.0) * (1.0 / 9.0) + ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * (c11 - c12 + c22) * (pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * 4.0 - 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (4.0 / 3.0) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 3.0) - c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 5.0 / 2.0) * (c11 - c12 * 4.0 + c22) * 3.0) * (8.0 / 3.3E1) + (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * 1.0 / sqrt(c11 * c22 - c12 * c12) * ((c11 * (-2.0 / 3.0) + c12 * (8.0 / 3.0) - c22 * (2.0 / 3.0)) / (c11 * c22 - c12 * c12) + c12 * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 6.0) + c12 * pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 2.0) * (1.0 / 2.0)) * (c11 - c12 + c22) * (8.0 / 3.3E1) + c12 * (1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * pow(c11 - c12 * 4.0 + c22, 3.0) * (1.0 / 9.0) - pow(c11 - c22, 2.0) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 * 4.0 + c22)) * ((pow(c11 - c22, 2.0) * (1.0 / 4.0)) / (c11 * c22 - c12 * c12) + (pow(c11 - c12 * 4.0 + c22, 2.0) * (1.0 / 1.2E1)) / (c11 * c22 - c12 * c12)) * 1.0 / pow(c11 * c22 - c12 * c12, 3.0 / 2.0) * (c11 - c12 + c22) * (8.0 / 3.3E1);
}

// A very long and complicated function that uses the reduced metrics of
// the cell to calculate energy and the reduced stress r_s
void Cell::m_UNUSED_calculate_energy_and_reduced_stress()
{
    double burgers = 1.;
    double beta = -0.25;
    double K = 4.;

    // Uses the reduced metrics
    double c11 = C_[0][0];
    double c22 = C_[1][1];
    double c12 = C_[0][1];

    /* #region Variables */

    double v1_ = c11 * c22;                                                                                                                           // 316 occurances
    double v2_ = c12 * c12;                                                                                                                           // 316 occurances
    double v3_ = c12 + c22;                                                                                                                           // 40 occurances
    double v4_ = c11 - c22;                                                                                                                           // 115 occurances
    double v5_ = c11 - v3_;                                                                                                                           // 40 occurances
    double v6_ = v1_ - v2_;                                                                                                                           // 316 occurances
    double v7_ = pow(v6_, 3.0 / 2.0);                                                                                                                 // 123 occurances
    double v8_ = pow(c11 - (c12 * 4.0) + c22, 3.0);                                                                                                   // 50 occurances
    double v9_ = pow(v4_, 2.0);                                                                                                                       // 115 occurances
    double v10_ = pow(c11 - (c12 * 4.0) + c22, 2.0);                                                                                                  // 65 occurances
    double v11_ = pow(v6_, 2.0);                                                                                                                      // 37 occurances
    double v12_ = pow(v5_, 4.0);                                                                                                                      // 7 occurances
    double v13_ = pow(v5_, 3.0);                                                                                                                      // 10 occurances
    double v14_ = pow(v6_, 5.0 / 2.0);                                                                                                                // 33 occurances
    double v15_ = pow(v6_, 3.0);                                                                                                                      // 3 occurances
    double v16_ = pow(v5_, 2.0);                                                                                                                      // 3 occurances
    double v17_ = pow(1.0 / v7_ * v8_ * (1.0 / 9.0) - (v9_ * 1.0 / v7_) * (c11 - (c12 * 4.0) + c22), 2.0);                                            // 2 occurances
    double v18_ = pow((v9_ * (1.0 / 4.0)) / v6_ + (v10_ * (1.0 / 1.2E1)) / v6_, 3.0);                                                                 // 2 occurances
    double v19_ = pow((v9_ * (1.0 / 4.0)) / v6_ + (v10_ * (1.0 / 1.2E1)) / v6_, 2.0);                                                                 // 6 occurances
    double v20_ = sqrt(v6_);                                                                                                                          // 20 occurances
    double v21_ = (1.0 / 4.0);                                                                                                                        // 37 occurances
    double v22_ = (1.0 / 1.2E1);                                                                                                                      // 37 occurances
    double v23_ = (1.0 / 8.1E1);                                                                                                                      // 4 occurances
    double v24_ = (1.0 / 9.0);                                                                                                                        // 37 occurances
    double v25_ = (v9_ * 1.0 / v7_);                                                                                                                  // 48 occurances
    double v26_ = (c12 * 4.0);                                                                                                                        // 58 occurances
    double v27_ = (7.0 / 1.98E2);                                                                                                                     // 11 occurances
    double v28_ = (1.0 / 2.7E1);                                                                                                                      // 4 occurances
    double v29_ = (8.0 / 3.3E1);                                                                                                                      // 11 occurances
    double v30_ = (1.0 / 6.0);                                                                                                                        // 30 occurances
    double v31_ = (2.0 / 3.0);                                                                                                                        // 15 occurances
    double v32_ = (1.0 / 2.0);                                                                                                                        // 25 occurances
    double v33_ = (4.1E1 / 3.3E1);                                                                                                                    // 3 occurances
    double v34_ = (1.0 / 3.0);                                                                                                                        // 15 occurances
    double v35_ = (c11 * 2.0 - c22 * 2.0);                                                                                                            // 10 occurances
    double v36_ = (3.0 / 2.0);                                                                                                                        // 10 occurances
    double v37_ = (1.0 / 5.28E2);                                                                                                                     // 3 occurances
    double v38_ = (4.0 / 8.1E1);                                                                                                                      // 4 occurances
    double v39_ = (2.0 / 8.1E1);                                                                                                                      // 2 occurances
    double v40_ = (7.0 / 3.96E2);                                                                                                                     // 2 occurances
    double v41_ = (1.2E1 / 1.1E1);                                                                                                                    // 3 occurances
    double v42_ = (1.7E1 / 2.64E2);                                                                                                                   // 3 occurances
    double v43_ = (1.0 / 1.8E1);                                                                                                                      // 2 occurances
    double v44_ = (4.0 / 3.3E1);                                                                                                                      // 2 occurances
    double v45_ = (-1.0 / 6.0);                                                                                                                       // 5 occurances
    double v46_ = (-2.0 / 3.0);                                                                                                                       // 5 occurances
    double v47_ = (8.0 / 3.0);                                                                                                                        // 5 occurances
    double v48_ = (c12 * 2.0);                                                                                                                        // 2 occurances
    double v49_ = (4.0 / 3.0);                                                                                                                        // 5 occurances
    double v50_ = (v9_ * v21_);                                                                                                                       // 27 occurances
    double v51_ = (v10_ * v22_);                                                                                                                      // 27 occurances
    double v52_ = (c11 - v26_ + c22);                                                                                                                 // 58 occurances
    double v53_ = (c11 * v30_ - c12 * v31_ + c22 * v30_);                                                                                             // 5 occurances
    double v54_ = (c11 * v32_ - c22 * v32_);                                                                                                          // 10 occurances
    double v55_ = (c11 * v45_ + c12 * v31_ - c22 * v30_);                                                                                             // 5 occurances
    double v56_ = (c11 * v46_ + c12 * v47_ - c22 * v31_);                                                                                             // 5 occurances
    double v57_ = (v50_ / v6_ + v51_ / v6_);                                                                                                          // 27 occurances
    double v58_ = (1.0 / v7_ * v8_ * v24_ - v25_ * v52_);                                                                                             // 33 occurances
    double v59_ = (v53_ / v6_ + v54_ / v6_ - c22 * 1.0 / v11_ * v10_ * v22_ - c22 * v9_ * 1.0 / v11_ * v21_);                                         // 5 occurances
    double v60_ = (v25_ - 1.0 / v7_ * v10_ * v34_ + c22 * 1.0 / v14_ * v8_ * v30_ + 1.0 / v7_ * v35_ * v52_ - c22 * v9_ * 1.0 / v14_ * v52_ * v36_);  // 5 occurances
    double v61_ = (v55_ / v6_ + v54_ / v6_ + c11 * 1.0 / v11_ * v10_ * v22_ + c11 * v9_ * 1.0 / v11_ * v21_);                                         // 5 occurances
    double v62_ = (-v25_ + 1.0 / v7_ * v10_ * v34_ - c11 * 1.0 / v14_ * v8_ * v30_ + 1.0 / v7_ * v35_ * v52_ + c11 * v9_ * 1.0 / v14_ * v52_ * v36_); // 5 occurances
    double v63_ = (v56_ / v6_ + c12 * 1.0 / v11_ * v10_ * v30_ + c12 * v9_ * 1.0 / v11_ * v32_);                                                      // 5 occurances
    double v64_ = (v25_ * 4.0 - 1.0 / v7_ * v10_ * v49_ + c12 * 1.0 / v14_ * v8_ * v34_ - c12 * v9_ * 1.0 / v14_ * v52_ * 3.0);                       // 5 occurances
    /* #endregion */

    energy = -K * (log(v6_ / burgers) - v6_ / burgers) + beta * (v17_ * 9.46969696969697E-4 - v18_ * (4.1E1 / 9.9E1) + v57_ * 1.0 / v11_ * v12_ * v23_ - v58_ * v57_ * 1.0 / v20_ * v5_ * v27_) + v17_ * (1.7E1 / 5.28E2) + v18_ * (4.0 / 1.1E1) - v58_ * 1.0 / v7_ * v13_ * v28_ + v58_ * v57_ * 1.0 / v20_ * v5_ * v29_;

    // TODO zeroing energy
    //energy -= s.zeroing_energy;
    r_s[0][0] = -beta * (v19_ * v59_ * v33_ + v58_ * v60_ * v37_ - v57_ * 1.0 / v11_ * v13_ * v38_ - 1.0 / v11_ * v12_ * v59_ * v23_ + v58_ * v57_ * 1.0 / v20_ * v27_ + c22 * v57_ * 1.0 / v15_ * v12_ * v39_ - v57_ * 1.0 / v20_ * v5_ * v60_ * v27_ + v58_ * 1.0 / v20_ * v5_ * v59_ * v27_ - c22 * v58_ * v57_ * 1.0 / v7_ * v5_ * v40_) + K * (c22 / burgers - c22 / v6_) + v19_ * v59_ * v41_ - v58_ * v60_ * v42_ + 1.0 / v7_ * v13_ * v60_ * v28_ - v58_ * 1.0 / v7_ * v16_ * v24_ + v58_ * v57_ * 1.0 / v20_ * v29_ + c22 * v58_ * 1.0 / v14_ * v13_ * v43_ - v57_ * 1.0 / v20_ * v5_ * v60_ * v29_ + v58_ * 1.0 / v20_ * v5_ * v59_ * v29_ - c22 * v58_ * v57_ * 1.0 / v7_ * v5_ * v44_;

    r_s[1][1] = beta * (v19_ * v61_ * v33_ + v58_ * v62_ * v37_ + v57_ * 1.0 / v11_ * v13_ * v38_ - 1.0 / v11_ * v12_ * v61_ * v23_ - v58_ * v57_ * 1.0 / v20_ * v27_ - c11 * v57_ * 1.0 / v15_ * v12_ * v39_ - v57_ * 1.0 / v20_ * v5_ * v62_ * v27_ + v58_ * 1.0 / v20_ * v5_ * v61_ * v27_ + c11 * v58_ * v57_ * 1.0 / v7_ * v5_ * v40_) + K * (c11 / burgers - c11 / v6_) - v19_ * v61_ * v41_ + v58_ * v62_ * v42_ - 1.0 / v7_ * v13_ * v62_ * v28_ - v58_ * 1.0 / v7_ * v16_ * v24_ + v58_ * v57_ * 1.0 / v20_ * v29_ + c11 * v58_ * 1.0 / v14_ * v13_ * v43_ + v57_ * 1.0 / v20_ * v5_ * v62_ * v29_ - v58_ * 1.0 / v20_ * v5_ * v61_ * v29_ - c11 * v58_ * v57_ * 1.0 / v7_ * v5_ * v44_;

    r_s[0][1] = v19_ * v63_ * v41_ - K * (v48_ / burgers - v48_ / v6_) + v58_ * v64_ * v42_ - beta * (v19_ * v63_ * v33_ - v58_ * v64_ * v37_ + v57_ * 1.0 / v11_ * v13_ * v38_ - 1.0 / v11_ * v63_ * v12_ * v23_ - v58_ * v57_ * 1.0 / v20_ * v27_ - c12 * v57_ * 1.0 / v15_ * v12_ * v38_ + v57_ * 1.0 / v20_ * v5_ * v64_ * v27_ + v58_ * 1.0 / v20_ * v63_ * v5_ * v27_ + c12 * v58_ * v57_ * 1.0 / v7_ * v5_ * v27_) - 1.0 / v7_ * v13_ * v64_ * v28_ + v58_ * 1.0 / v7_ * v16_ * v24_ - v58_ * v57_ * 1.0 / v20_ * v29_ - c12 * v58_ * 1.0 / v14_ * v13_ * v24_ + v57_ * 1.0 / v20_ * v5_ * v64_ * v29_ + v58_ * 1.0 / v20_ * v63_ * v5_ * v29_ + c12 * v58_ * v57_ * 1.0 / v7_ * v5_ * v29_;
}